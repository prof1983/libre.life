<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="/css/main.css"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Language" content="ru"/>
<title>Bitcoin: встроенная система сценариев и цифровые контракты - Libre</title>
</head>
<body>
<header></header><script src="/js/header.js"></script>
<main>

<h1>Bitcoin: встроенная система сценариев и цифровые контракты</h1>

<figure>
<a href="00b.jpg"><img src="00.jpg"/></a>
</figure>

<!--
Встроенная система сценариев, предназначенная для проверки валидности транзакций, а также некоторые её возможности. На родном языке такой информации мне не попадалось, потому вношу свою лепту.
-->


<p>  	
Про <a href="http://bitcoin.org/" target="_blank"><b>Bitcoin</b></a> на Хабре писали уже достаточно, однако лишь в общих чертах. Для непосвященных, на мой взгляд, полезными будут топики: <a href="https://habrahabr.ru/post/125572/" target="_blank">раз</a> и <a href="https://habrahabr.ru/post/114642/" target="_blank">два</a>.
</p>

<p>
В этом же посте затронут весьма узкий аспект — встроенная система сценариев, предназначенная для проверки валидности транзакций, а также некоторые её возможности. На родном языке такой информации мне не попадалось, потому вношу свою лепту.
</p>


<h2>Немного о сценариях</h2>

<p>
Для проверки транзакций <b>Bitcoin</b> имеется встроенный стек-ориентированный язык сценариев, чем-то похожий на <a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%BE%D1%80%D1%82_(%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)" target="_blank">Forth</a>. По понятным причинам он не является <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%BD%D0%BE%D1%82%D0%B0_%D0%BF%D0%BE_%D0%A2%D1%8C%D1%8E%D1%80%D0%B8%D0%BD%D0%B3%D1%83" target="_blank">Тьюринг-полным</a> и в нём нет циклов. С другой стороны, он очень прост.
</p>

<p>
По существу, сценарий — это последовательность инструкций внутри транзакции, которая описывает, как лицо, желающее потратить биткоины, должно получить к ним доступ. Сценарий типичного перевода средств на адрес <b>A</b> налагает 2 требования на лицо, желающее впоследствии воспользоваться этими средствами:

<ul>
<li>предоставить в следующей транзакции открытый ключ, хэш которого равен <b>A</b>,</li>
<li>предоставить подпись, доказывающую владение указанным выше открытым ключом.</li>
</ul>

<p>
Сценарии достаточно гибки по части указания различных условий дальнейшего распоряжения средствами. Например, можно потребовать два ключа/подписи или комбинацию нескольких подписей. В общем случае лицо(лица), отправляющее средства, указывает в транзакции сценарий их последующей траты (<b>scriptPubKey</b>). Лицо(лица), желающее воспользоваться полученными средствами, в следующей транзакции указывает входные данные для сценария (<b>scriptSig</b>). Если у транзакции сумма входящих средств больше или равна сумме исходящих средств, а комбинированный (<b>scriptSig + scriptPubKey</b>) сценарий выполняется без сбоя и в результате его работы на верхушке стека оказывается истинное (ненулевое) значение, транзакция считается валидной и майнеры могут включать её в цепочку блоков.
</p>

<p>
<a href="http://blockexplorer.com/tx/d9e99930c72ca66a9ee8784808cb30e778111b48f9ca5c70d8afc0f648b11e21" target="_blank">Пример типичной транзакции</a>:
</p>

<blockquote>
scriptPubKey:
<br/>
<b>OP_DUP</b> <b>OP_HASH160</b> <i>{addr}</i> <b>OP_EQUALVERIFY</b> <b>OP_CHECKSIG</b><br/>
<br/>
scriptSig:<br/>
<i>{sig}</i> <i>{pubKey}</i><br/>
<br/>
Трассировка по шагам:<br/>
<table>
<tr>
<th>№</th>
<th>Стек</th>
<th>Сценарий</th>
</tr>
<tr>
<th>0</th>
<td><nobr><i>EMPTY</i></nobr></td>
<td><nobr><i>{sig}</i> <i>{pubKey}</i> <b>OP_DUP</b> <b>OP_HASH160</b> <i>{addr}</i> <b>OP_EQUALVERIFY</b> <b>OP_CHECKSIG</b></nobr></td>
</tr>
<tr>
<th>1</th>
<td><nobr><i>{sig}</i></nobr></td>
<td><nobr><i>{pubKey}</i> <b>OP_DUP</b> <b>OP_HASH160</b> <i>{addr}</i> <b>OP_EQUALVERIFY</b> <b>OP_CHECKSIG</b></nobr></td>
</tr>
<tr>
<th>2</th>
<td><nobr><i>{sig}</i> <i>{pubKey}</i></nobr></td>
<td><nobr><b>OP_DUP</b> <b>OP_HASH160</b> <i>{addr}</i> <b>OP_EQUALVERIFY</b> <b>OP_CHECKSIG</b></nobr></td>
</tr>
<tr>
<th>3</th>
<td><nobr><i>{sig}</i> <i>{pubKey}</i> <i>{pubKey}</i></nobr></td>
<td><nobr><b>OP_HASH160</b> <i>{addr}</i> <b>OP_EQUALVERIFY</b> <b>OP_CHECKSIG</b></nobr></td>
</tr>
<tr>
<th>4</th>
<td><nobr><i>{sig}</i> <i>{pubKey}</i> <i>{hash}</i></nobr></td>
<td><nobr><i>{addr}</i> <b>OP_EQUALVERIFY</b> <b>OP_CHECKSIG</b></nobr></td>
</tr>
<tr>
<th>5</th>
<td><nobr><i>{sig}</i> <i>{pubKey}</i> <i>{hash}</i> <i>{addr}</i></nobr></td>
<td><nobr><b>OP_EQUALVERIFY</b> <b>OP_CHECKSIG</b></nobr></td>
</tr>
<tr>
<th>5</th>
<td><nobr><i>{sig}</i> <i>{pubKey}</i></nobr></td>
<td><nobr><b>OP_CHECKSIG</b></nobr></td>
</tr>
<tr>
<th>6</th>
<td><nobr><i>TRUE</i></nobr></td>
<td><nobr><i>EMPTY</i></nobr></td>
</tr>
</table>
</blockquote>

<p>
Подробнее про сценарии можно почитать <a href="https://en.bitcoin.it/wiki/Script" target="_blank">здесь</a>.
</p>




<h2>Временная блокировка, мультиверсионность и прочая магия</h2>

<p>
Помимо сценариев в Bitcoin-транзакциях есть еще несколько интересных штук: транзакция может быть <b>отложенной</b> на некоторое время или до какого-то конкретного блока, может менять в процессе согласования свою <b>версию</b>. У обычных транзакций интервал блокировки равен нулю, а версия — максимально возможная.
</p>

<p>
Кроме того, имеется возможность задавать режим хеширования транзакции при проверке подписи:
</p>

<ul>
<li><b>SIGHASH_ALL</b> — режим по умолчанию, по сути означает «я вношу свою часть если каждый вносит свою и получатели денег такие-то каждый на соответствующую сумму»;</li>
<li><b>SIGHASH_NONE</b> — означает «я вношу свою часть если каждый вносит свою, а кто получатель мне все равно»;</li>
<li><b>SIGHASH_SINGLE</b> — почти то же самое, по сути «я вношу свою часть если каждый вносит свою, но один из получателей такой-то на такую-то сумму».</li>
</ul>

<p>
Есть еще модификатор <b>SIGHASH_ANYONECANPAY</b>, который, будучи добавленным к любому из перечисленных режимов, по сути уберет слова «если каждый вносит свою» из описаний этих самых режимов.
</p>




<h2>Контракты</h2>

<p>
И вот на таком хитром базисе можно строить <b>распределенные контракты</b> — метод достижения договорённости между сторонами посредством использования цепочки блоков. Контракты не делают чего-то такого, что не было бы возможно раньше, однако они позволяют решать некоторые распространенные проблемы таким образом, что не требуется взаимного доверия сторон или его уровень сведен к минимуму. Такой подход позволяет избавиться от услуг доверенного посредника (который может прихватить ваши денежки и быть таков) при совершении сделок и разрешении спорных ситуаций. В качестве примера рассмотрим следующую жизненную ситуацию.
</p>



<h3>Сделка с протекцией и разрешение конфликта</h3>

<p>
Покупатель желает приобрести товар у продавца, которого он не знает и которому не доверяет. В случае нормально прошедшей сделки покупатель не хотел бы посвящать в детали постороннее лицо. Однако в случае проблем покупатель хотел бы, чтобы независимый арбитр решил, кто получит деньги. В качестве доказательства последний может запросить у продавца, скажем, квитанцию об отправке товара почтой.
</p>

<p>
Другими словами, Покупатель хотел бы заблокировать некую сумму, распоряжаться которой можно было бы с согласия хотя бы двух лиц из трех. Для этого он:
</p>

<ul>
<li>Договаривается с Продавцом об Арбитре.</li>
<li>Запрашивает у Продавца и Арбитра их открытые ключи <b>K1</b> и <b>K2</b> соответственно и создает новый ключ <b>K3</b> для себя.</li>
<li>Посылает продавцу ключ Арбитра <b>K2</b>. Продавец проверяет подлинность <b>K2</b> запросив подпись случайного числа.</li>
<li>Создает транзакцию <b>T1</b> на сумму заказа такую, что потратить ее исходящие средства можно только по предоставлении хотя бы 2 подписей, и публикует ее в сети.</li>
</ul> После включения транзакции в цепочку блоков средства могут быть потрачены транзакцией <b>T2</b> если:<ul>
<li>Покупатель и Продавец ставят свои подписи под ней — сделка завершилась успешно или Продавец возвратил средства клиенту не дожидаясь решения Арбитра.</li>
<li>Покупатель и Арбитр ставят свои подписи — сделка не произошла, Арбитр вернул средства Покупателю.</li>
<li>Арбитр и Продавец ставят свои подписи — сделка признана Арбитром состоявшейся, несмотря на возражения Покупателя, средства переданы продавцу.</li>
</ul>

<p>
Подробнее о контрактах можно почитать <a href="https://en.bitcoin.it/wiki/Contracts" target="_blank">здесь</a> и <a href="https://en.bitcoin.it/wiki/Smart_Property" target="_blank">здесь</a>. Если тема будет интересной, опишу еще несколько типовых контрактов. 
</p>

<p>
7 марта 2012 в 17:06
</p>

<p>
Источник:
<a href="https://web.archive.org/web/20140911154857/http://habrahabr.ru/post/139291/" target="_blank">web.archive.org/web/20140911154857/http://habrahabr.ru/post/139291</a>
</p>




<br/>
<br/>

<p class="h2"><a href="/contract/ru">Умные контракты</a></p>

</main>
<footer><div>7524-05-25 - 7524-05-25</div></footer><script src="/js/footer.js"></script>
</body>
</html>