<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="/css/main.css"/>
<meta charset="utf-8"/>
<meta http-equiv="Content-Language" content="ru"/>
<title>BitDust - Libre</title>
</head>
<body>
<header></header><script src="/js/header.js"></script>
<main>

<h1>BitDust</h1>

<figure>
<img src="img/00.jpg"/>
</figure>

<p class="h">
<b>Распределенное защищенное он-лайн хранилище</b>
</p>

<p class="h3">
<a href="http://bitdust.io/">bitdust.io</a>
</p>




<h2>О проекте</h2>

<!-- http://bitdust.io/intro.html -->

<p>
BitDust – это децентрализованное и защищенное он-лайн хранилище, в котором только владелец данных имеет доступ к ним.
</p>

<p>
Представьте, что вы и двое ваших друзей согласились хранить данные друг для друга. На своем компьютере вы храните данные, которые оба ваших товарища загружают к вам через Интернет, а вы в свою очередь имеете возможность использовать пространство на их машинах. Это создает избыточность, но позволяет более надежно хранить важную информацию. И это справедливая сделка, ведь все трое заинтересованы в максимальной надежности и доступности хранимой информации.
</p>

<p>
Сеть BitDust – это добровольное объединение людей с целью совместного использования ресурсов их персональных компьютеров. Одинаковые копии программы BitDust запущены на машинах всех пользователей – это обеспечивает взаимодействие узлов друг с другом через сеть Интернет, а данные передаются непосредственно от пользователя к пользователю и хранятся у них на жестких дисках.
</p>

<p>
При загрузке в сеть, исходные данные архивируются, разделяются на блоки и фрагменты, шифруются и закачиваются на компьютеры других пользователей. Система спроектирована таким образом, что будет постоянно осуществлять мониторинг каждого узла, который хранит ваши данные. Программа BitDust постоянно поддерживает состояние, при котором вы в любой момент можете скачать данные обратно. Механизм автоматического восстановления позволяет динамически пересобрать закачанные в сеть фрагменты данных на новых узлах, без каких либо действий со стороны пользователя.
</p>

<p>
Программа BitDust написана на языке Python с использованием библиотеки Twisted и распространяется в открытых исходных кодах под частной лицензией.
</p>




<h2>Что?</h2>

<p>
BitDust – это проект всемирной распределенной компьютерной сети для безопасного хранения и передачи информации. Сеть BitDust подобна “цифровой пыли” – она работает поверх существующих Интернет соединений по защищенным каналам и имеет полностью распределенную структуру. В основу проекта BitDust заложены следующие принципы:
</p>

<ul>
<li>равноправность всех участников</li>
<li>защищенность личной информации</li>
<li>возможность анонимного входа в сеть</li>
<li>справедливые взаимоотношения</li>
<li>открытость и понятность</li>
<li>удобство и простота использования</li>
</ul>


<h3>Доступное</h3>

<ul>
<li>BitDust это кроссплатформенное приложение</li>
<li>программа написана на языке Python 2.7 с использованием библиотеки Twisted Framework</li>
<li>почти во всех современных операционных системах программа может быть легко запущена из исходников</li>
</ul>

<h3>Открытый код</h3>

<p>
<li>программа BitDust написана на языке Python и распространяется как есть</li>
<li>мы предоставляем рабочий код в исходных Python текстах</li>
<li>однако BitDust это проприетарное ПО – не GPL, BSD и др.</li>
<li>вы можете запускать и использовать программу в любых целях</li>
<li>вы можете исследовать как программа работает и изменять исходный код по собственному усмотрению</li>
<li>вы можете распространять копии программы и таким образом помогать другим пользователям</li>
<li>но вы НЕ МОЖЕТЕ распространять модифицированные копии программы</li>
<li>если вы желаете изменить поведение программы – свяжитесь с нами и пришлите вашу версию кода</li>
<li>мы бы хотели создать открытое сообщество разработчиков и энтузиастов проекта BitDust</li>
</p>

<h3>Децентрализация</h3>

<ul>
<li>все взаимодействия пользователей происходят напрямую, без выделенных серверов</li>
<li>машина каждого пользователя выполняет роль сервера и клиента одновременно</li>
<li>все узелы действуют самостоятельно и автономно</li>
<li>все пользователи имеют равные права</li>
</ul>

<h3>P2P хранилище</h3>

<ul>
<li>все данные хранятся на компьютерах самих же пользователей</li>
<li>каждый пользователь хранит лишь фрагменты ваших данных, которые бесполезны для него</li>
<li>дезинтеграция данных – после загрузки в сеть они полностью теряют свою целостность</li>
<li>программа использует модицифированный код Хэммиинга для создания RAID массива из исходных данных</li>
</ul>

<h3>Защита данных</h3>

<ul>
<li>каждый пользуется своим секретным ключом</li>
<li>все данные, закачанные в сеть BitDust, зашифрованы этим ключом</li>
<li>все служебные пакеты передаваемые через Интернет зашифрованы и защищены от изменений цифровой подписью</li>
<li>вы можете выбрать размер секретного ключа при первом запуске программы</li>
</ul>

<h3>Анонимность</h3>

<ul>
<li>используются лишь короткие текстовые идентификаторы – никнейм пользователя</li>
<li>секретный ключ пользователя защищает его идентификацию в сети</li>
<li>самоподписанные identity файлы хранят ключевую служебную информацию</li>
<li>не требуется проходить какую либо авторизацию</li>
<li>не нужно предоставлять email, номер телефона, паспортные данные и т.д.</li>
<li>у нас не существует службы поддержки</li>
<li>компания BitDust не ведет централизованный сбор информации о пользователях</li>
</ul>




<h2>Зачем?</h2>

<p>
BitDust – это целостная экосистема, основная идея которой заключается в полной децентрализации всех потоков информации и хранимых данных.
</p>

<p>
Наша цель предоставить всем участникам сети защиту, независимость, приватность и полный контроль над личными данными.
</p>

<p>
Автономность каждого узла в сети BitDust и безопасность всех соединений предоставляет возможность беспрепятственного распространения и получения информации пользователями – без возможности какого либо контроля, обнаружения или оказания давления третьими лицами.
</p>

<p>
Мы предпринимаем активные шаги для защиты во всем человеческом обществе свободы слова и защиты прав личности. Конечная цель проекта BitDust это личная информационная безопасность каждого пользователя.
</p>

<h3>Бесплатно</h3>

<ul>
<li>все участники сети действуют абсолютно добровольно</li>
<li>отдайте часть пространства на своем жестком диске в сеть BitDust</li>
<li>поддержите других пользователей и они будут вам благодарны</li>
<li>пусть программа постоянно работает на вашем компьютере для непрерывного доступа к данным</li>
<li>закачивайте свои данные в сеть – это абсолютно бесплатно!</li>
</ul>

<h3>Больше защиты</h3>

<ul>
<li>децентрализация</li>
<li>самоподписанные identity файлы</li>
<li>вход в сеть без пароля – только секретный ключ</li>
<li>автономность всех узлов</li>
<li>шифрование</li>
<li>защита от сетевого перехвата</li>
<li>уникальная защита от физического изъятия машины пользователя</li>
</ul>

<h3>Никаких паролей</h3>

<ul>
<li>вам не нужен пароль для входа в сеть BitDust!</li>
<li>не нужно сообщать свой email или номер мобильного телефона</li>
<li>у вас нет возможности ответить на “секретный вопрос” для восстановления доступа</li>
<li>у нас нет службы поддержки пользователей или горячей линии</li>
<li>в сети BitDust не существует центров авторизации или восстановления доступа</li>
<li>при первом входе в сеть BitDust генерируется секретный ключ пользователя</li>
<li>самоподписанные identity файлы хранят ключевую служебную информацию</li>
<li>электронная подпись защищает идентификацию пользователя</li>
<li>только ваш секретный ключ дает доступ к закачанным данным</li>
<li>сделайте несколько копий секретного ключа сразу после первого входа в сеть: скопируйте на USB флэшку, сделайте пару копий на других компьютерах, напечатайте на листе A4</li>
<li>никто не сможет восстановить доступ к вашим данным при утрате секретного ключа, даже BitDust!</li>
</ul>

<h3>Любые объемы</h3>

<ul>
<li>во время закачки исходные данные разделяются на блоки</li>
<li>каждый ваш хранитель получает лишь фрагмент блока</li>
<li>в сеть могут быть закачаны файлы любого размера</li>
<li>вы ограничены лишь доступным объемом, который был вам предоставлен другими пользователями</li>
</ul>

<h3>Перспективы</h3>

<ul>
<li>общий доступ к вашим данным, группы доступа, гибкая настройка привелегий, быстрые ссылки</li>
<li>100% децентрализованная почта</li>
<li>распределенные чат/видео/конференц связь</li>
<li>монетизация p2p хранилища через криптовалюту</li>
<li>глобальная биржа ресурсов ПК</li>
<li>полностью децентрализованная социальная сеть</li>
<li>распределенный WEB-хостинг</li>
<li>бесконечные виртуальные 3D миры</li>
</ul>

<h3>Твои идеи</h3>

<ul>
<li>ты программируешь на языке Pyhon?</li>
<li>интересуешься новыми технологиями?</li>
<li>тебе нравятся p2p сети?</li>
<li>в проекте BitDust ты можешь реализовать свои задумки</li>
<li>ПО состоит из взаимосвязанных сетевых сервисов</li>
<li>разработчики получают готовый p2p фреймворк</li>
<li>ключевые методы при взаимодействии узлов: outbox и inbox</li>
<li>основные “строительные блоки” это конечные автоматы</li>
</ul>

<h3>Свобода</h3>

<ul>
<li>сеть состоит из обычных ПК</li>
<li>никаких закрытых back-end’ов или SaS</li>
<li>все узлы равноправны</li>
<li>все узлы автономны</li>
<li>идентичное ПО для всех</li>
<li>открытый исходный код</li>
<li>от зависимости к автономности</li>
<li>от потребления к объединению</li>
<li>от сомнений к доверию</li>
<li>вперед к информационной свободе!</li>
</ul>




<h2>Как это работает?</h2>

<!-- http://bitdust.io/principle.html -->

<h3>Полностью децентрализованная сеть</h3>

<p>
Вся сеть BitDust состоит из равноправных узлов, где каждый являются для других одновременно и клиентом и сервером. Пользователь самостоятельно авторизует себя в сети и защищено взаимодействует с другими используя свой ID и секретный ключ.
</p>

<h3>Распределенное хранение данных</h3>

<p>
Каждый участник сети BitDust получает возможность размещать свои данные на машинах других пользователей – его хранителей. Закачанные данные дублируются и организованы в RAID массив для обеспечения возможности их восстановления.
</p>

<h3>Автоматическое восстановление данных</h3>

<p>
Каждый хранитель получает удвоенную порцию информации: сами данные в зашифрованном виде и RAID-копию, которая позволяет восстановить их при потере. Весь процесс происходит автоматически и не требует каких либо действий от самого пользователя.
</p>

<h3>Защита пользовательской информации</h3>

<p>
Все служебные пакеты имеют цифровую подпись, а личные данные пользователя шифруются, используя его секретный ключ – хранители не имеют к ним доступ. Только при наличии закрытого ключа, можно восстановить исходные данные.
</p>

<h3>Анонимный вход в сеть</h3>

<p>
Для входа в сеть, не требуется проходить какую либо авторизацию, предоставлять email или номер телефона, не существует службы поддержки, а компания BitDust не ведет централизованный сбор информации о пользователях.
</p>

<h3>Использует распределенную хэш-таблицу</h3>

<p>
Распределенная хэш-таблица используется для хранения служебной информации, соединения пользователей между собой и поддержания работоспособности всей сети в целом.
</p>

<h3>Передает данные по TCP и UDP</h3>

<p>
Узлы в сети BitDust соединяются друг с другом напрямую, а данные передаются с использованием протоколов TCP и UDP.
</p>

<h3>Соединение пользователей за NAT`ом</h3>

<p>
Обеспечивается возможность соединения узлов в сети, которые находятся за NAT и не могут принимать прямые входящие соединения в обычном виде. Для этого используется распределенная хэш-таблица для хранения оперативной служебной информации, на подобии «точки рандеву».
</p>

<h3>Управляется конечными автоматами</h3>

<p>
Проект BitDust разрабатывается по принципам автоматного программирования и <a href="http://is.ifmo.ru/works/open_doc/">движения за открытую проектную документацию</a>. Это парадигма, в которой программа или ее фрагмент представляется как модель какого-либо конечного автомата.
</p>




<h2>Распределенное хранилище</h2>

<!-- http://bitdust.io/storage.html -->

<h3>Введение</h3>

<p>
Сеть BitDust состоит из множества равноправных узлов, владельцы которых по своей доброй воле предоставляют часть аппаратных ресурсов своих персональных компьютеров друг для друга. Обмениваясь ресурсами, пользователи сети получают более надежное, защищенное и полностью независимое хранилище для собственных данных.
</p>

<h3>Хранители / Клиенты</h3>

<p>
Размещение данных пользователя происходит на заранее фиксированный набор узлов, которые называются “хранителями”. При этом сам он становится для этих пользователей “клиентом” – образно говоря, он “арендует” часть жесткого диска у каждого из своих хранителей.
</p>

<p>
Прежде чем пользователь сможет начать первую загрузку данных, программа BitDust должна произвести писк и подключение к его хранителям и выделить доступное пространство под его данные. При первом запуске, а позже и в настройках программы, пользователь устанавливает два ключевых параметра, которые определяют основные параметры его распределенного хранилища:
</p>

<ul>
<li>объем запрошенного пространства</li>
<li>желаемое число хранителей</li>
</ul>

<p>
Из этих данных может быть легко рассчитано значение, которое требуется выделить на каждом узле, и все хранители смогут проверить и заранее выделить под его файлы необходимое место на своих жестких дисках.
</p>

<p>
Количество хранителей может принимать одно из следующих значений: 2, 4, 7, 13, 18, 26, 64. Ниже будет более подробно описано, каким образом происходит размещение данных и как организованы наборы хранителей.
</p>

<p>
Количество клиентов, которых каждый пользователь может поддерживать, теоретически не ограничено. Однако при слишком большом их числе может быть превышено возможное число открытых сетевых сессий – этот параметр зависит от операционной системы, на которой запущен данный узел BitDust. Кроме того, при одновременной загрузке/скачивании с машины пользователя будет сильно ограничен сетевой канал, который достается каждому клиенту – только узлы с очень широкой пропускной способностью смогут поддерживать большое число клиентов.
</p>

<h3>Загрузка в сеть</h3>

<p>
Каждый из хранителей получает равномерные порции от общего объема загруженных пользователем данных. При этом каждый фрагмент загруженных данных помечается номером того хранителя в общем наборе, которому он предназначен. При смене одного хранителя на другого, новый узел получает именно те данные, которые соответствуют его порядковому номеру в наборе.
</p>

<p>
Для равномерной и стабильной загрузки исходные данные предварительно архивируются и разделяются на блоки одинакового размера. Эта фаза практически идентична созданию обычного .tar архива из содержимого папки или файла на жестком диске с разделением на тома.
</p>

<p>
Далее каждый блок шифруется секретным ключом пользователя и делится на фрагменты одинакового размера, которые временно сохраняются на локальном жестком диске пользователя. На финальном этапе, именно эти локальные файлы, которые являются подготовленными к отправке порциями данных, и загружаются на удаленные узлы хранителей. Там они хранятся в том же виде, но полностью распределены по всему набору хранителей пользователя – каждый из них получает именно те фрагменты, которые были созданы для его позиции в наборе.
</p>

<p>
Вот общий порядок действий при создании распределенной копии данных в более кратком виде:
</p>

<ul>
<li>чтение исходных данных из папки или файла на локальном жестком диске пользователя</li>
<li>архивация данных и опциональное сжатие одним из методов: gzip или bzip2</li>
<li>разбиение цельного массива бинарных данных на блоки одинакового размера</li>
<li>шифрование каждого блока секретным ключом пользователя</li>
<li>запуск RAID-процедуры для создания набора фрагментов из каждого блока</li>
<li>формирование порций данных из фрагментов и запись их во временные файлы на локальном жестком диске</li>
<li>загрузка всех порций на соответствующие им узлы хранителей</li>
<li>удаление временных файлов с локального диска (опционально)</li>
</ul>

<p>
В настройках программы пользователь может указать максимальный и желаемый размер блока при создании резервной копии данных – это будет влиять на конечный размер порций, которые одна за другой будут закачиваться и храниться на хранителях. При очень большом размере блока, критически возрастает цена потери при закачке, ведь при обрыве связи закачка текущей порции будет прервана и должна быть снова начата с начала. С другой стороны при слишком малом размере блока сильно возрастает общее число порций и критически снижается общая производительность программы и объем расходуемой оперативной памяти.
</p>

<h3>Избыточность данных</h3>

<p>
В разделе <a href="http://bitdust.io/rebuilding.html">Автоматическое восстановление данных</a> более подробно описан метод преобразования исходных данных перед размещением на узлах хранителей. Загружаемые в сеть данные, хранятся с двойной избыточностью и организованы в RAID массив для обеспечения возможности их восстановления в случае потери.
</p>

<p>
Два параллельных слоя, Data и Parity, имеют одинаковый размер, но разное содержимое:
</p>

<ul>
<li>Data слой состоит целиком из исходных данных</li>
<li>Parity слой имеет модифицированное содержимое, построенное с помощью RAID процедуры</li>
</ul>

<p>
Для генерирования Parity слоя, в момент создания резервной копии данные побайтно считываются, и производится операция XOR между Data фрагментами, предназначенными для двух других хранителей. RAID массив устроен таким образом, что каждый Parity фрагмент позволяет восстановить соответствующий ему Data фрагмент на машине нового хранителя, который оперативно подменил потерянного.
</p>

<p>
При построении RAID массива используется так называемые ECC коды – это комбинации расположений Data и Parity фрагментов на машинах хранителей. Для каждого из возможных наборов хранителей был рассчитан оптимальный ECC код - он определяет схему взаимного расположения Data и Parity фрагментов в слоях и максимальное количество одновременных ошибок, которые могут случиться без потери целостности всего блока.
</p>

<h3>Скачивание из сети</h3>

<p>
Для скачивания размещенных в сети BitDust данных обратно на машину пользователя, требуется:
</p>

<ul>
<li>запросить и скачать ранее размещенные на хранителях порции данных</li>
<li>восстановить каждый блок из собранных воедино фрагментов</li>
<li>расшифровать каждый восстановленный блок и проверить его целостность по электронной подписи</li>
<li>собрать все восстановленные блоки в единый архив</li>
<li>извлечь данные из архива на жесткий диск пользователя</li>
<li>удалить временные файлы и архивный файл</li>
</ul>

<p>
В случае если часть фрагментов отсутствует, например, по причине отсутствия соединения с некоторыми хранителями, будет запущен механизм восстановления потерянных данных в Data слое, по имеющимся на руках фрагментам Parity слоя.
</p>

<h3>Аппаратные ресурсы</h3>

<p>
Все узлы в сети BitDust являются полностью равноправными относительно друг друга. Не существует узлов более высоких порядков, имеющих особые полномочия, управляющих глобальными процессами и структурой сети, выполняющих маршрутизацию или сбор данных и т.д. Все пользователи по собственной доброй воле запускают на своих машинах программу BitDust и имеют возможность использовать аппаратные ресурсы других узлов и отдать в сеть часть ресурсов своего ПК:
</p>

<ul>
<li>пространство на жестком диске</li>
<li>процессорное время</li>
<li>сетевой канал подключения к сети Интернет.</li>
</ul>

<p>
В настройках программы пользователь указывает следующие ключевые данные:
</p>

<ul>
<li>объем запрошенного из сети пространства для загрузки собственных данных</li>
<li>объем, который он готов предоставить на своем жестком диске для других узлов</li>
<li>желаемое число хранителей, на которых будут распределено храниться его загруженные данные</li>
<li>лимит использования сетевого канала</li>
<li>число ядер процессора, которые он готов загрузить вычислениями полезными для других узлов</li>
</ul>

<p>
На данный момент в программе BitDust не реализован механизм для поощрения пользователей и выделение ресурсов собственного компьютера для других пользователей производится безвозмездно. Однако в планах BitDust ключевым пунктом является разработка подобной методики и предоставление возможности пользователями получать прямую выгоду передавая другим часть ресурсов своего ПК.
</p>




<h2>Сетевые сервисы</h2>

<!-- http://bitdust.io/services.html -->

<h3>Введение</h3>

<p>
Каждый узел в сети BitDust является равноправным и автономным участником общего процесса – самостоятельной единицей, соединенной напрямую с другими точно такими же пользователями. Здесь каждый равен в своих правах и может использовать любой набор из доступных всем функций.
</p>

<p>
Работоспособность всей сети базируется на принципах добровольного обмена ресурсами компьютеров самих пользователей, а все основные процессы происходят полностью в автоматическом режиме. При этом каждые два узла, напрямую взаимодействуя друг с другом, как бы заключают соглашение о добровольном сотрудничестве, прежде чем начинается основной процесс обмена данных между ними и реализация полезного функционала программы BitDust.
</p>

<h3>Архитектура</h3>

<p>
Поведение ядра программы BitDust разделено на множество функциональных блоков, которые оформлены как отдельные сетевые “службы”. Каждый такой “сервис” оформлен как цельная и самостоятельная единица и управляет отдельной частью общего полезного функционала программы.
</p>

<p>
Пользователь имеет возможность включать и выключать любые сетевые службы через настройки программы и таким образом управлять работой узла сети BitDust, запущенного на его ПК.
</p>

<p>
Эта архитектура очень похожа на то, как устроены службы в операционной системе Windows.
</p>

<p>
Существует глобальный список служб, которые могут быть включены или выключены пользователем и будут автоматически запущены при старте программы, если являются активными и запустят нужные функции ПО.
</p>

<p>
Через взаимодействие активных сетевых сервисов на разных узлах происходит распределение и обмен ресурсами ПК в сети BitDust. Некоторые службы работают в паре и требуют обязательного подключения с другими узлами: “голова сервиса” работает как клиент и запрашивает подключение к другим узлам, на которых обязательно должен быть активирован другой связанный сервис, который отдает ресурсы и работает как “хвост сервиса”
</p>

<h3>Зависимости</h3>

<p>
Все взаимосвязи между сервисами на локальном узле регламентированы на достаточно простом и понятном уровне – сервис, может быть, зависим от одного или нескольких других сервисов и может быть запущен, только если все они уже запущены на данном узле.
</p>

<p>
Запуск служб при старте программы происходит в порядке, который определяется данными зависимостями: службы более высокого порядка будут запущены только после успешного запуска базовых сетевых сервисов.
</p>

<p>
В случае если пользователь в процессе работы программы BitDust остановил один из сервисов, который влияет на другие службы – они также будут остановлены. В ядре отрабатывается корректный старт и остановка всех сервисов в нужном порядке и происходит автоматическое слежение за данными процессами.
</p>

<p>
Это формирует так называемое “дерево сетевых служб”, а вся архитектура имеет некоторое подобие с менеджером пакетов в операционной системе Linux. При установке новых пакетов происходит проверка уже установленных на компьютере программ и их версий и если, какие либо зависимости не были удовлетворены, то перед установкой новой программы должны быть скачаны и установлены влияющие на нее пакеты.
</p>

<h3>Карта сетевых служб</h3>

<figure>
<img src="img/services.png"/>
<br/>
<a href="services.pdf">services.pdf</a>
</figure>




<p class="h2"><a href="/net/ru">Сеть</a></p>

</main>
<footer><div>7523-03-24 - 7523-04-15</div></footer><script src="/js/footer.js"></script>
</body>
</html>